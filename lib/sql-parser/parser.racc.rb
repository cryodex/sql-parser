#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 344)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    56,    89,   110,    40,   110,    69,   221,     9,   197,    10,
    76,   121,    11,    85,    12,   232,   223,    56,   224,   225,
   226,   233,    70,   120,    72,    73,   160,    74,    75,   218,
   219,   164,    78,    90,    56,    78,    30,   226,    78,   182,
    78,   168,   169,    59,    60,   119,    44,    57,    48,    50,
    51,    52,    53,    30,    61,    56,    64,   165,    40,   166,
    59,    60,    80,    44,    57,    48,    50,    51,    52,    53,
    30,    61,   114,    64,    59,    60,    22,    59,    60,   173,
    44,    57,    48,    50,    51,    52,    53,    80,    61,    56,
    64,    30,   125,    87,    88,   175,  -130,   176,    59,    60,
    22,    44,    57,    48,    50,    51,    52,    53,    22,    61,
    56,    64,    78,    40,   104,   103,   182,   132,    78,   194,
   197,   105,    12,   200,   129,    30,  -130,  -130,  -130,   201,
   202,    56,    59,    60,    40,    44,    57,    48,    50,    51,
    52,    53,   203,    61,    26,    64,    30,   204,   205,   206,
   207,   123,   209,    59,    60,   210,    44,    57,    48,    50,
    51,    52,    53,   102,    61,    56,    64,    30,   226,   101,
    78,    69,   100,   220,    59,    60,  -149,    44,    57,    48,
    50,    51,    52,    53,   152,    61,    56,    64,    70,    40,
    72,    73,    99,    74,    75,    78,    98,   228,    12,    97,
    78,    30,    96,    56,    95,    94,   226,   152,    59,    60,
   -86,    44,    57,    48,    50,    51,    52,    53,    84,    61,
    56,    64,    30,    40,    12,    24,   242,   243,    22,    59,
    60,   245,    44,    57,    48,    50,    51,    52,    53,    30,
    61,    56,    64,   246,    40,    80,    59,    60,   248,    44,
    57,    48,    50,    51,    52,    53,    30,    61,   122,    64,
    22,   228,    66,    59,    60,    65,    44,    57,    48,    50,
    51,    52,    53,   252,    61,    56,    64,    30,   125,    24,
   254,    22,    30,    16,    59,    60,   182,    44,    57,    48,
    50,    51,    52,    53,    78,    61,    56,    64,   263,    40,
    15,   265,   182,   132,   266,   267,   268,    13,    30,    78,
   129,    30,   nil,   nil,   nil,   nil,   nil,   nil,    59,    60,
   nil,    44,    57,    48,    50,    51,    52,    53,   nil,    61,
    56,    64,    30,   125,   nil,   nil,   nil,   nil,   nil,    59,
    60,   nil,    44,    57,    48,    50,    51,    52,    53,   nil,
    61,    56,    64,   nil,   226,   nil,   nil,   nil,   132,   nil,
   nil,   nil,   nil,   nil,   nil,   129,    30,   nil,    56,   nil,
   nil,    40,   nil,    59,    60,   nil,    44,    57,    48,    50,
    51,    52,    53,   nil,    61,    56,    64,    30,   226,   nil,
   nil,   nil,   nil,   nil,    59,    60,   nil,    44,    57,    48,
    50,    51,    52,    53,    30,    61,    56,    64,   nil,    40,
   nil,    59,    60,   nil,    44,    57,    48,    50,    51,    52,
    53,    30,    61,    56,    64,   nil,   226,   nil,    59,    60,
   nil,    44,    57,    48,    50,    51,    52,    53,   nil,    61,
   nil,    64,    30,   nil,   nil,   nil,   nil,   nil,    56,    59,
    60,   125,    44,    57,    48,    50,    51,    52,    53,    30,
    61,   nil,    64,   nil,   nil,    56,    59,    60,    40,    44,
    57,    48,    50,    51,    52,    53,   132,    61,   nil,    64,
   nil,   nil,    56,   129,    30,    40,   nil,   nil,   nil,   nil,
   nil,    59,    60,   nil,    44,    57,    48,    50,    51,    52,
    53,    30,    61,    56,    64,   nil,   226,   nil,   nil,   nil,
   nil,    44,    57,    48,    50,    51,    52,    53,    30,    61,
    56,    64,   nil,   226,   nil,    59,    60,   nil,    44,    57,
    48,    50,    51,    52,    53,   nil,    61,    56,    64,    30,
   226,   nil,   nil,   nil,   nil,   nil,    59,    60,   nil,    44,
    57,    48,    50,    51,    52,    53,    30,    61,    56,    64,
   nil,    40,   nil,    59,    60,   nil,    44,    57,    48,    50,
    51,    52,    53,    30,    61,    56,    64,   nil,   226,   nil,
    59,    60,   nil,    44,    57,    48,    50,    51,    52,    53,
   nil,    61,   nil,    64,    30,   nil,   nil,   nil,   nil,   nil,
    56,    59,    60,   125,    44,    57,    48,    50,    51,    52,
    53,    30,    61,   nil,    64,   nil,   nil,    56,    59,    60,
    40,    44,    57,    48,    50,    51,    52,    53,   132,    61,
   154,    64,   nil,   nil,    56,   129,    30,    40,   nil,   nil,
   nil,   nil,   nil,    59,    60,   nil,    44,    57,    48,    50,
    51,    52,    53,    30,    61,    56,    64,   nil,    40,   nil,
    59,    60,   nil,    44,    57,    48,    50,    51,    52,    53,
    30,    61,    56,    64,   nil,    40,   nil,    59,    60,   nil,
    44,    57,    48,    50,    51,    52,    53,   nil,    61,    56,
    64,    30,    40,   nil,   nil,   nil,   nil,   nil,    59,    60,
   nil,    44,    57,    48,    50,    51,    52,    53,    30,    61,
   nil,    64,   nil,   nil,    56,    59,    60,   125,    44,    57,
    48,    50,    51,    52,    53,    30,    61,   nil,    64,   nil,
   nil,    56,    59,    60,    40,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,   nil,    64,   nil,   nil,    56,   129,
    30,    40,   nil,   nil,   nil,   nil,   nil,    59,    60,   nil,
    44,    57,    48,    50,    51,    52,    53,    30,    61,   nil,
    64,   nil,   nil,    56,    59,    60,   226,    44,    57,    48,
    50,    51,    52,    53,    30,    61,   nil,    64,   nil,   nil,
   nil,    59,    60,   nil,    44,    57,    48,    50,    51,    52,
    53,   nil,    61,    56,    64,   nil,   125,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,    12,    59,    60,   nil,    44,
    57,    48,    50,    51,    52,    53,   nil,    61,   nil,    64,
   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   129,    30,
   nil,   188,   nil,   nil,   nil,   nil,    59,    60,   nil,    44,
    57,    48,    50,    51,    52,    53,   nil,    61,    69,    64,
   183,   184,   nil,   185,   186,   187,   nil,    68,   nil,   nil,
   189,   190,   191,   192,   193,    70,   nil,    72,    73,    69,
    74,    75,   nil,   113,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   114,   nil,   nil,   nil,   nil,    70,   nil,    72,    73,
   nil,    74,    75 ]

racc_action_check = [
    88,    34,   166,    88,    66,   178,   180,     0,   222,     0,
    18,    73,     0,    29,     0,   187,   183,   263,   183,   183,
   263,   187,   178,    71,   178,   178,   100,   178,   178,   178,
   178,   102,    18,    34,   252,    29,    88,   252,   166,   180,
    66,   108,   108,    88,    88,    70,    88,    88,    88,    88,
    88,    88,    88,   263,    88,   246,    88,   103,   246,   106,
   263,   263,    83,   263,   263,   263,   263,   263,   263,   263,
   252,   263,   112,   263,   102,   102,    69,   252,   252,   114,
   252,   252,   252,   252,   252,   252,   252,   115,   252,   242,
   252,   246,   242,    33,    33,   116,    32,   117,   246,   246,
   119,   246,   246,   246,   246,   246,   246,   246,   120,   246,
   228,   246,    68,   228,    61,    61,   126,   242,    85,   129,
   130,    64,   228,   145,   242,   242,    32,    32,    32,   154,
   155,    12,   242,   242,    12,   242,   242,   242,   242,   242,
   242,   242,   156,   242,    12,   242,   228,   157,   158,   159,
   163,    75,   171,   228,   228,   172,   228,   228,   228,   228,
   228,   228,   228,    58,   228,   225,   228,    12,   225,    57,
   176,    81,    56,   179,    12,    12,    54,    12,    12,    12,
    12,    12,    12,    12,   181,    12,   226,    12,    81,   226,
    81,    81,    53,    81,    81,    76,    52,   185,   226,    51,
    94,   225,    50,   223,    48,    45,   223,    93,   225,   225,
    30,   225,   225,   225,   225,   225,   225,   225,    28,   225,
    87,   225,   226,    87,   194,    25,   199,   200,    24,   226,
   226,   211,   226,   226,   226,   226,   226,   226,   226,   223,
   226,    89,   226,   212,    89,    23,   223,   223,   219,   223,
   223,   223,   223,   223,   223,   223,    87,   223,    74,   223,
    16,   224,    15,    87,    87,    13,    87,    87,    87,    87,
    87,    87,    87,   227,    87,   218,    87,    89,   218,    11,
   232,    10,   243,     9,    89,    89,   247,    89,    89,    89,
    89,    89,    89,    89,   248,    89,   210,    89,   249,   210,
     7,   253,   255,   218,   256,   260,   261,     1,   266,   268,
   218,   218,   nil,   nil,   nil,   nil,   nil,   nil,   218,   218,
   nil,   218,   218,   218,   218,   218,   218,   218,   nil,   218,
   197,   218,   210,   197,   nil,   nil,   nil,   nil,   nil,   210,
   210,   nil,   210,   210,   210,   210,   210,   210,   210,   nil,
   210,   193,   210,   nil,   193,   nil,   nil,   nil,   197,   nil,
   nil,   nil,   nil,   nil,   nil,   197,   197,   nil,    84,   nil,
   nil,    84,   nil,   197,   197,   nil,   197,   197,   197,   197,
   197,   197,   197,   nil,   197,   192,   197,   193,   192,   nil,
   nil,   nil,   nil,   nil,   193,   193,   nil,   193,   193,   193,
   193,   193,   193,   193,    84,   193,    90,   193,   nil,    90,
   nil,    84,    84,   nil,    84,    84,    84,    84,    84,    84,
    84,   192,    84,   191,    84,   nil,   191,   nil,   192,   192,
   nil,   192,   192,   192,   192,   192,   192,   192,   nil,   192,
   nil,   192,    90,   nil,   nil,   nil,   nil,   nil,    80,    90,
    90,    80,    90,    90,    90,    90,    90,    90,    90,   191,
    90,   nil,    90,   nil,   nil,    35,   191,   191,    35,   191,
   191,   191,   191,   191,   191,   191,    80,   191,   nil,   191,
   nil,   nil,    40,    80,    80,    40,   nil,   nil,   nil,   nil,
   nil,    80,    80,   nil,    80,    80,    80,    80,    80,    80,
    80,    35,    80,   190,    80,   nil,   190,   nil,   nil,   nil,
   nil,    35,    35,    35,    35,    35,    35,    35,    40,    35,
   189,    35,   nil,   189,   nil,    40,    40,   nil,    40,    40,
    40,    40,    40,    40,    40,   nil,    40,   188,    40,   190,
   188,   nil,   nil,   nil,   nil,   nil,   190,   190,   nil,   190,
   190,   190,   190,   190,   190,   190,   189,   190,   113,   190,
   nil,   113,   nil,   189,   189,   nil,   189,   189,   189,   189,
   189,   189,   189,   188,   189,   184,   189,   nil,   184,   nil,
   188,   188,   nil,   188,   188,   188,   188,   188,   188,   188,
   nil,   188,   nil,   188,   113,   nil,   nil,   nil,   nil,   nil,
   182,   113,   113,   182,   113,   113,   113,   113,   113,   113,
   113,   184,   113,   nil,   113,   nil,   nil,    95,   184,   184,
    95,   184,   184,   184,   184,   184,   184,   184,   182,   184,
    95,   184,   nil,   nil,    96,   182,   182,    96,   nil,   nil,
   nil,   nil,   nil,   182,   182,   nil,   182,   182,   182,   182,
   182,   182,   182,    95,   182,   175,   182,   nil,   175,   nil,
    95,    95,   nil,    95,    95,    95,    95,    95,    95,    95,
    96,    95,   173,    95,   nil,   173,   nil,    96,    96,   nil,
    96,    96,    96,    96,    96,    96,    96,   nil,    96,    97,
    96,   175,    97,   nil,   nil,   nil,   nil,   nil,   175,   175,
   nil,   175,   175,   175,   175,   175,   175,   175,   173,   175,
   nil,   175,   nil,   nil,   132,   173,   173,   132,   173,   173,
   173,   173,   173,   173,   173,    97,   173,   nil,   173,   nil,
   nil,    98,    97,    97,    98,    97,    97,    97,    97,    97,
    97,    97,   nil,    97,   nil,    97,   nil,   nil,    99,   132,
   132,    99,   nil,   nil,   nil,   nil,   nil,   132,   132,   nil,
   132,   132,   132,   132,   132,   132,   132,    98,   132,   nil,
   132,   nil,   nil,   186,    98,    98,   186,    98,    98,    98,
    98,    98,    98,    98,    99,    98,   nil,    98,   nil,   nil,
   nil,    99,    99,   nil,    99,    99,    99,    99,    99,    99,
    99,   nil,    99,   125,    99,   nil,   125,   nil,   nil,   186,
   nil,   nil,   nil,   nil,   nil,   125,   186,   186,   nil,   186,
   186,   186,   186,   186,   186,   186,   nil,   186,   nil,   186,
   nil,   125,   nil,   nil,   nil,   nil,   nil,   nil,   125,   125,
   nil,   128,   nil,   nil,   nil,   nil,   125,   125,   nil,   125,
   125,   125,   125,   125,   125,   125,   nil,   125,    17,   125,
   128,   128,   nil,   128,   128,   128,   nil,    17,   nil,   nil,
   128,   128,   128,   128,   128,    17,   nil,    17,    17,    67,
    17,    17,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    67,   nil,   nil,   nil,   nil,    67,   nil,    67,    67,
   nil,    67,    67 ]

racc_action_pointer = [
    -3,   307,   nil,   nil,   nil,   nil,   nil,   298,   nil,   272,
   240,   259,   126,   265,   nil,   259,   219,   854,    -9,   nil,
   nil,   nil,   nil,   215,   187,   205,   nil,   nil,   214,    -6,
   158,   nil,    78,    45,   -17,   460,   nil,   nil,   nil,   nil,
   477,   nil,   nil,   nil,   nil,   153,   nil,   nil,   196,   nil,
   194,   191,   188,   184,   118,   nil,   120,   164,   105,   nil,
   nil,    55,   nil,   nil,    59,   nil,    -1,   875,    71,    35,
    23,     1,   nil,   -14,   233,   126,   154,   nil,   nil,   nil,
   443,   167,   nil,    32,   363,    77,   nil,   215,    -5,   236,
   401,   nil,   nil,   198,   159,   612,   629,   684,   726,   743,
    21,   nil,    26,    -2,   nil,   nil,    55,   nil,    35,   nil,
   nil,   nil,    56,   553,    71,    57,    81,    93,   nil,    59,
    67,   nil,   nil,   nil,   nil,   798,    74,   nil,   827,   111,
    85,   nil,   709,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   120,   121,   133,   138,   139,   140,
   nil,   nil,   nil,   145,   nil,   nil,    -3,   nil,   nil,   nil,
   nil,   143,   151,   667,   nil,   650,   129,   nil,     1,   164,
    -3,   175,   595,   -18,   570,   189,   768,   -18,   532,   515,
   498,   418,   380,   346,   207,   nil,   nil,   325,   nil,   194,
   224,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   291,   222,   239,   nil,   nil,   nil,   nil,   nil,   270,   240,
   nil,   nil,   -27,   198,   253,   160,   181,   238,   105,   nil,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    84,   241,   nil,   nil,    50,   244,   253,   263,
   nil,   nil,    29,   292,   nil,   260,   300,   nil,   nil,   nil,
   296,   302,   nil,    12,   nil,   nil,   267,   nil,   268,   nil,
   nil,   nil ]

racc_action_default = [
  -161,  -161,    -1,    -2,    -3,    -4,    -5,    -7,   -18,  -161,
  -161,  -161,  -161,  -161,    -6,  -161,  -161,  -161,   -43,   -44,
   -46,   -47,   -86,   -63,  -161,   -31,   -32,   -33,   -35,   -38,
  -155,  -113,  -114,  -117,  -120,  -161,  -122,  -123,  -124,  -125,
  -161,  -127,  -128,  -129,  -131,  -161,  -133,  -134,  -161,  -136,
  -161,  -161,  -161,  -161,  -142,  -143,  -147,  -161,  -161,  -153,
  -154,  -161,  -158,  -159,  -161,   272,  -161,  -161,  -161,  -161,
  -161,  -161,   -51,   -53,   -55,   -56,  -161,   -42,  -155,   -25,
  -161,   -40,   -30,   -63,  -161,  -161,   -37,  -161,  -161,  -161,
  -161,  -121,  -130,  -161,  -161,  -161,  -161,  -161,  -161,  -161,
  -145,  -146,  -161,  -161,  -157,  -160,    -8,   -10,   -14,   -12,
   -13,   -19,  -161,  -161,  -161,   -63,  -161,   -24,   -48,  -161,
  -161,   -52,   -54,   -57,   -41,  -161,   -64,   -72,  -161,  -161,
   -89,   -91,  -161,   -94,   -95,   -96,   -98,   -99,  -100,  -101,
  -102,  -103,  -110,  -111,  -112,   -65,   -34,   -36,  -115,  -116,
  -118,  -119,  -126,  -132,  -161,  -161,  -161,  -161,  -161,  -161,
  -144,  -148,  -150,  -161,  -152,  -156,  -161,   -11,   -15,   -16,
   -20,  -161,   -28,  -161,   -21,  -161,  -161,   -49,  -161,  -161,
  -161,  -112,  -161,  -161,  -161,  -161,  -161,  -161,  -161,  -161,
  -161,  -161,  -161,  -161,  -161,   -45,   -85,  -161,   -93,   -70,
  -161,  -135,  -137,  -138,  -139,  -140,  -141,  -151,    -9,   -26,
  -161,  -161,   -80,   -22,   -23,   -50,   -58,   -59,  -161,  -161,
   -17,   -97,   -90,  -161,  -161,  -161,  -161,  -161,  -161,   -76,
   -77,   -82,  -161,   -84,  -104,  -105,  -106,  -107,  -108,  -109,
   -92,   -39,  -161,  -161,   -27,   -29,  -161,   -60,  -161,  -161,
   -75,   -81,  -161,  -161,   -83,   -71,   -66,   -68,   -69,   -79,
  -161,   -62,   -88,  -161,   -74,   -78,  -161,   -61,  -161,   -73,
   -67,   -87 ]

racc_goto_table = [
    77,    29,    18,    17,   126,   107,   171,   115,    18,    67,
   211,    86,   195,   229,    79,   111,    18,    81,    27,   257,
   258,   150,   151,   148,   149,    92,    23,   199,    25,    93,
   227,    82,   231,   167,   234,   235,   236,   237,   238,   239,
    83,   112,   270,   258,   241,     1,   196,   215,   109,   180,
   116,   216,   250,   217,   106,   260,   261,   256,   124,    14,
   170,   118,     7,     6,     5,   253,   222,   147,   195,   249,
   240,   251,   198,    29,   145,     4,   153,    92,    92,    92,
    92,     3,     2,   259,   155,   156,   157,   158,   159,   163,
   146,    91,   161,   162,   nil,   nil,   nil,   nil,   264,   nil,
   nil,   nil,   172,   244,   nil,   208,   174,   195,   nil,   269,
   nil,   177,    18,   178,   181,   214,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   247,   nil,   nil,   nil,   nil,   nil,   109,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,   nil,
   nil,   nil,   212,   nil,   213,   nil,   255,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    93,   nil,   212,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   262,   nil,   nil,   nil,   nil,   212,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   271 ]

racc_goto_check = [
    13,    22,    32,    16,    41,    10,    24,    19,    32,    16,
    25,    13,    14,    51,    20,    17,    32,    16,    28,    45,
    46,    64,    64,    62,    62,    63,    23,    30,    26,    22,
    49,    27,    49,    12,    49,    49,    49,    49,    49,    49,
    23,    18,    45,    46,    31,     1,    34,    38,    13,    41,
    13,    39,    51,    40,     9,    42,    43,    44,    13,     8,
    17,    32,     7,     6,     5,    25,    55,    13,    14,    49,
    56,    49,    57,    22,    20,     4,    13,    63,    63,    63,
    63,     3,     2,    25,    22,    22,    22,    22,    22,    66,
    28,    67,    78,    79,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,    22,    24,   nil,    10,    20,    14,   nil,    49,
   nil,    32,    32,    16,    22,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    41,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,   nil,    22,   nil,    22,   nil,    41,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13 ]

racc_goto_pointer = [
   nil,    45,    82,    81,    75,    64,    63,    62,    52,   -12,
   -61,   nil,   -75,   -18,  -117,   nil,    -7,   -52,   -26,   -61,
    -9,   nil,   -11,    15,  -107,  -163,    16,     6,     6,   nil,
  -118,  -155,    -8,   nil,   -83,   nil,   nil,   nil,  -131,  -127,
  -125,   -76,  -193,  -192,  -186,  -224,  -223,   nil,   nil,  -154,
   nil,  -172,   nil,   nil,   nil,  -116,  -127,   -60,   nil,   nil,
   nil,   nil,   -64,   -10,   -68,   nil,   -13,    56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -10,    -9,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   nil,   nil,
   nil,   108,   nil,    46,   127,     8,   nil,   nil,   nil,   nil,
   nil,   117,   144,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,    47,    19,   230,    20,    21,    71,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   143,   137,   128,
   138,   nil,   139,   140,   141,   130,   131,   133,   134,   135,
   136,   142,    31,    32,    33,    34,    35,    36,    37,    39,
    41,    42,    43,    45,    49,    54,    55,    58,   nil,   nil,
    62,    63 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 64, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 65, :_reduce_none,
  2, 66, :_reduce_6,
  0, 71, :_reduce_none,
  3, 71, :_reduce_8,
  3, 72, :_reduce_9,
  1, 72, :_reduce_none,
  2, 73, :_reduce_11,
  1, 74, :_reduce_none,
  1, 74, :_reduce_13,
  0, 75, :_reduce_14,
  1, 75, :_reduce_15,
  1, 75, :_reduce_16,
  3, 77, :_reduce_17,
  1, 70, :_reduce_none,
  4, 67, :_reduce_19,
  5, 67, :_reduce_20,
  5, 68, :_reduce_21,
  3, 84, :_reduce_22,
  3, 82, :_reduce_23,
  1, 82, :_reduce_none,
  3, 69, :_reduce_25,
  3, 81, :_reduce_26,
  3, 87, :_reduce_27,
  1, 87, :_reduce_none,
  4, 80, :_reduce_29,
  3, 78, :_reduce_30,
  2, 78, :_reduce_31,
  1, 89, :_reduce_32,
  1, 89, :_reduce_33,
  3, 91, :_reduce_34,
  1, 91, :_reduce_none,
  3, 92, :_reduce_36,
  2, 92, :_reduce_37,
  1, 92, :_reduce_none,
  4, 90, :_reduce_39,
  2, 86, :_reduce_40,
  3, 79, :_reduce_41,
  2, 79, :_reduce_42,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 97, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 98, :_reduce_48,
  4, 98, :_reduce_49,
  5, 99, :_reduce_50,
  1, 100, :_reduce_51,
  2, 100, :_reduce_52,
  1, 100, :_reduce_53,
  2, 100, :_reduce_54,
  1, 100, :_reduce_55,
  1, 100, :_reduce_56,
  2, 100, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  2, 102, :_reduce_60,
  4, 103, :_reduce_61,
  1, 105, :_reduce_none,
  0, 83, :_reduce_none,
  2, 83, :_reduce_64,
  0, 93, :_reduce_none,
  3, 93, :_reduce_66,
  3, 107, :_reduce_67,
  1, 107, :_reduce_none,
  1, 108, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_71,
  1, 110, :_reduce_none,
  6, 111, :_reduce_73,
  5, 111, :_reduce_74,
  4, 113, :_reduce_75,
  3, 113, :_reduce_76,
  1, 114, :_reduce_none,
  3, 114, :_reduce_78,
  3, 88, :_reduce_79,
  1, 88, :_reduce_none,
  4, 115, :_reduce_81,
  3, 115, :_reduce_82,
  4, 116, :_reduce_83,
  3, 116, :_reduce_84,
  2, 117, :_reduce_85,
  1, 95, :_reduce_86,
  3, 106, :_reduce_87,
  1, 106, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_90,
  1, 118, :_reduce_none,
  3, 118, :_reduce_92,
  2, 119, :_reduce_93,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  3, 121, :_reduce_97,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 123, :_reduce_104,
  3, 123, :_reduce_105,
  3, 123, :_reduce_106,
  3, 123, :_reduce_107,
  3, 123, :_reduce_108,
  3, 123, :_reduce_109,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 124, :_reduce_none,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  3, 125, :_reduce_115,
  3, 125, :_reduce_116,
  1, 125, :_reduce_none,
  3, 127, :_reduce_118,
  3, 127, :_reduce_119,
  1, 127, :_reduce_none,
  2, 128, :_reduce_121,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_126,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_131,
  3, 109, :_reduce_132,
  1, 109, :_reduce_none,
  1, 136, :_reduce_none,
  4, 132, :_reduce_135,
  1, 132, :_reduce_none,
  4, 137, :_reduce_137,
  4, 137, :_reduce_138,
  4, 137, :_reduce_139,
  4, 137, :_reduce_140,
  4, 137, :_reduce_141,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 138, :_reduce_144,
  2, 138, :_reduce_145,
  2, 138, :_reduce_146,
  1, 138, :_reduce_147,
  3, 139, :_reduce_148,
  1, 140, :_reduce_none,
  1, 141, :_reduce_none,
  2, 142, :_reduce_151,
  1, 142, :_reduce_152,
  1, 129, :_reduce_153,
  1, 129, :_reduce_154,
  1, 76, :_reduce_155,
  3, 126, :_reduce_156,
  2, 126, :_reduce_157,
  1, 126, :_reduce_none,
  1, 143, :_reduce_none,
  2, 144, :_reduce_160 ]

racc_reduce_n = 161

racc_shift_n = 272

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :UPDATE => 12,
  :SET => 13,
  :equals_operator => 14,
  :DELETE => 15,
  :VALUES => 16,
  :SELECT => 17,
  :asterisk => 18,
  :AS => 19,
  :FROM => 20,
  :CROSS => 21,
  :JOIN => 22,
  :INNER => 23,
  :LEFT => 24,
  :OUTER => 25,
  :RIGHT => 26,
  :FULL => 27,
  :ON => 28,
  :USING => 29,
  :WHERE => 30,
  :GROUP => 31,
  :HAVING => 32,
  :NOT => 33,
  :BETWEEN => 34,
  :AND => 35,
  :IN => 36,
  :LIKE => 37,
  :IS => 38,
  :NULL => 39,
  :EXISTS => 40,
  :identifier => 41,
  :OR => 42,
  :not_equals_operator => 43,
  :less_than_operator => 44,
  :greater_than_operator => 45,
  :less_than_or_equals_operator => 46,
  :greater_than_or_equals_operator => 47,
  :plus_sign => 48,
  :minus_sign => 49,
  :solidus => 50,
  :CURRENT_USER => 51,
  :period => 52,
  :COUNT => 53,
  :AVG => 54,
  :MAX => 55,
  :MIN => 56,
  :SUM => 57,
  :E => 58,
  :quote => 59,
  :character_string_literal => 60,
  :DATE => 61,
  :date_string => 62 }

racc_nt_base = 63

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "equals_operator",
  "DELETE",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "update_column_list",
  "where_clause",
  "update_column",
  "value_expression",
  "from_clause",
  "in_column_list",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::UpdateColumn.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_23(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_34(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_50(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_67(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_121(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_151(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
