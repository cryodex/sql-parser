#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 367)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   145,   142,   173,   205,  -140,    35,   220,   189,     7,   172,
   246,   164,     8,   190,   140,   141,   247,    10,    11,   159,
   158,   248,    94,    95,   284,   285,    91,   249,   145,  -133,
  -110,    37,    37,    73,   112,    50,   250,  -110,   143,  -140,
  -140,  -140,    94,    95,   122,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   179,    99,   180,   181,
    40,    73,   251,    50,  -133,  -133,  -133,   252,   253,   254,
    94,    95,   255,    77,    92,    81,    83,    84,    85,    86,
    87,    88,   256,    96,   257,    99,    91,    53,   258,   235,
   261,   262,    40,    73,    49,    50,   269,   270,   271,   273,
   274,   275,    94,    95,    50,    77,    92,    81,    83,    84,
    85,    86,    87,    88,   122,    96,    37,    99,    91,    53,
   145,   282,   169,    50,   293,    73,    49,    50,   294,   295,
   235,   122,   298,    37,    94,    95,    50,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   145,    99,
    12,    19,    20,    73,    22,    50,    24,    25,    26,    19,
    39,    19,    94,    95,    50,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   145,    99,    19,   105,
   106,    73,   107,    50,   108,   109,    37,   118,   119,   122,
    94,    95,   134,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   145,    99,   -93,   137,   147,    73,
   148,    50,   149,   150,   151,   152,   153,   154,    94,    95,
  -164,    77,    92,    81,    83,    84,    85,    86,    87,    88,
    91,    96,   182,    99,   155,   156,   157,    73,   160,    50,
   162,   165,    19,    19,   169,   171,    94,    95,   112,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   145,    99,    19,    37,   185,    73,    10,    50,   216,   221,
   223,    50,   169,    50,    94,    95,   235,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   145,    99,
   236,   122,   238,    73,   137,    50,   185,   242,   245,   173,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   145,    99,   nil,   nil,
   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   145,    99,   nil,   nil,   nil,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
    91,    96,   145,    99,   nil,   nil,   nil,    73,    24,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,   nil,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   145,    99,   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   145,    99,
   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   145,    99,   nil,   nil,
   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   nil,    99,   nil,   nil,    40,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
   nil,    96,   nil,    99,    91,    53,   145,   nil,   nil,   nil,
   nil,    73,    49,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   182,    99,   nil,   nil,   nil,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
    91,    96,   145,    99,   nil,   nil,   nil,    73,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,   nil,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   nil,    99,   145,   215,   nil,    73,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,   nil,    96,    91,    99,
   145,   nil,   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   nil,    99,
   nil,   nil,    40,    73,   nil,    50,   nil,   nil,   nil,    42,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,   nil,    96,   nil,    99,    91,    53,
   nil,   nil,   nil,   nil,   nil,    73,    49,    50,    40,   nil,
    10,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,   nil,    96,   nil,    99,
   nil,   nil,   nil,   nil,    91,    53,   nil,   nil,   nil,   nil,
    40,    73,    49,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,   nil,    96,   nil,    99,    91,    53,   182,   nil,
   nil,   nil,   nil,    73,    49,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   182,    99,   nil,   nil,
   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   145,    99,    10,   nil,   nil,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
    91,    96,    40,    99,   nil,   nil,   nil,    73,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,   nil,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   145,    99,    10,   nil,   nil,    73,    49,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   nil,    99,
   nil,   nil,    40,    73,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,   nil,    96,   nil,    99,    91,    53,
   nil,   nil,   nil,   nil,    40,    73,    49,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,   nil,    96,   nil,    99,
    91,    53,   182,   nil,   nil,   nil,   nil,    73,    49,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,   nil,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   182,    99,   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   182,    99,
   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   182,    99,   nil,   nil,
   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   182,    99,   nil,   nil,   nil,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
    91,    96,   182,    99,   nil,   nil,   nil,    73,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,   nil,    77,
    92,    81,    83,    84,    85,    86,    87,    88,    91,    96,
   182,    99,   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    94,    95,   nil,    77,    92,    81,
    83,    84,    85,    86,    87,    88,    91,    96,   182,    99,
   nil,   nil,   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,    94,    95,   nil,    77,    92,    81,    83,    84,
    85,    86,    87,    88,    91,    96,   145,    99,   nil,   nil,
   nil,    73,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
    94,    95,   nil,    77,    92,    81,    83,    84,    85,    86,
    87,    88,    91,    96,   128,    99,   nil,   nil,   nil,    73,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    77,    92,    81,    83,    84,    85,    86,    87,    88,
  -119,    96,   nil,    99,   nil,   123,   124,   nil,   125,   126,
   127,   nil,   nil,   nil,   nil,   129,   130,   131,   132,   133,
   -31,   nil,   nil,   nil,   -31,   nil,   nil,   -31,   -31,   nil,
   -31,  -119,  -119,    28,  -119,  -119,  -119,   120,   nil,   nil,
   nil,  -119,  -119,  -119,  -119,  -119,   nil,    29,   nil,    31,
    32,   nil,    33,    34,    28,   nil,   112,   nil,  -110,   nil,
   nil,   nil,    27,    28,    37,  -110,   nil,   nil,    29,   nil,
    31,    32,    28,    33,    34,   232,   233,    29,   nil,    31,
    32,   nil,    33,    34,   nil,   nil,    29,   nil,    31,    32,
   nil,    33,    34 ]

racc_action_check = [
   151,    67,   115,   147,    65,    14,   157,   127,     0,   114,
   206,   101,     0,   127,    66,    66,   207,     0,     0,    96,
    96,   208,   157,   157,   265,   265,   151,   209,   165,   266,
   115,   147,    14,   151,   101,   151,   210,   115,    67,    65,
    65,    65,   151,   151,   114,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   165,   151,   123,   151,   123,   123,
   232,   165,   211,   165,   266,   266,   266,   212,   213,   214,
   165,   165,   219,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   223,   165,   224,   165,   232,   232,   225,   226,
   233,   235,   137,   232,   232,   232,   237,   238,   239,   243,
   244,   246,   232,   232,   258,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   260,   232,   261,   232,   137,   137,
   236,   263,   268,   270,   277,   137,   137,   137,   279,   280,
   286,   287,   288,   295,   137,   137,   298,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   236,   137,   140,   137,
     1,     7,     8,   236,     9,   236,    10,    11,    12,    20,
    22,    25,   236,   236,    27,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   140,   236,   141,   236,    28,    29,
    30,   140,    32,   140,    33,    34,    35,    41,    44,    46,
   140,   140,    49,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   141,   140,   142,   140,    50,    51,    78,   141,
    81,   141,    83,    84,    85,    86,    87,    88,   141,   141,
    89,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   142,   141,   242,   141,    91,    92,    93,   142,    99,   142,
   100,   103,   105,   106,   111,   113,   142,   142,   117,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   242,   142,
   143,   142,   118,   120,   125,   242,   134,   242,   155,   158,
   161,   162,   163,   164,   242,   242,   168,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   143,   242,   145,   242,
   169,   170,   174,   143,   178,   143,   180,   183,   189,   202,
   nil,   nil,   143,   143,   nil,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   145,   143,   252,   143,   nil,   nil,
   nil,   145,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   145,   nil,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   252,   145,   256,   145,   nil,   nil,   nil,   252,
   nil,   252,   nil,   nil,   nil,   nil,   nil,   nil,   252,   252,
   nil,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   256,   252,   148,   252,   nil,   nil,   nil,   256,   148,   256,
   nil,   nil,   nil,   nil,   nil,   nil,   256,   256,   nil,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   148,   256,
   149,   256,   nil,   nil,   nil,   148,   nil,   148,   nil,   nil,
   nil,   nil,   nil,   nil,   148,   148,   nil,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   149,   148,   150,   148,
   nil,   nil,   nil,   149,   nil,   149,   nil,   nil,   nil,   nil,
   nil,   nil,   149,   149,   nil,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   150,   149,   152,   149,   nil,   nil,
   nil,   150,   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,
   150,   150,   nil,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   152,   150,   nil,   150,   nil,   nil,   269,   152,
   nil,   152,   nil,   nil,   nil,   nil,   nil,   nil,   152,   152,
   nil,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   nil,   152,   nil,   152,   269,   269,   153,   nil,   nil,   nil,
   nil,   269,   269,   269,   nil,   nil,   nil,   nil,   nil,   nil,
   269,   269,   nil,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   153,   269,   271,   269,   nil,   nil,   nil,   153,
   nil,   153,   nil,   nil,   nil,   nil,   nil,   nil,   153,   153,
   nil,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   271,   153,   274,   153,   nil,   nil,   nil,   271,   nil,   271,
   nil,   nil,   nil,   nil,   nil,   nil,   271,   271,   nil,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   274,   271,
   nil,   271,   154,   154,   nil,   274,   nil,   274,   nil,   nil,
   nil,   nil,   nil,   nil,   274,   274,   nil,   274,   274,   274,
   274,   274,   274,   274,   274,   274,   nil,   274,   154,   274,
   282,   nil,   nil,   nil,   nil,   154,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   nil,   154,   154,   nil,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   282,   154,   nil,   154,
   nil,   nil,    23,   282,   nil,   282,   nil,   nil,   nil,    23,
   nil,   nil,   282,   282,   nil,   282,   282,   282,   282,   282,
   282,   282,   282,   282,   nil,   282,   nil,   282,    23,    23,
   nil,   nil,   nil,   nil,   nil,    23,    23,    23,    40,   nil,
    40,   nil,   nil,   nil,    23,    23,   nil,    23,    23,    23,
    23,    23,    23,    23,    23,    23,   nil,    23,   nil,    23,
   nil,   nil,   nil,   nil,    40,    40,   nil,   nil,   nil,   nil,
   112,    40,    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,
    40,    40,   nil,    40,    40,    40,    40,    40,    40,    40,
    40,    40,   nil,    40,   nil,    40,   112,   112,   179,   nil,
   nil,   nil,   nil,   112,   112,   112,   nil,   nil,   nil,   nil,
   nil,   nil,   112,   112,   nil,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   179,   112,   181,   112,   nil,   nil,
   nil,   179,   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,
   179,   179,   nil,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   181,   179,   182,   179,   182,   nil,   nil,   181,
   nil,   181,   nil,   nil,   nil,   nil,   nil,   nil,   181,   181,
   nil,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   182,   181,    53,   181,   nil,   nil,   nil,   182,   nil,   182,
   nil,   nil,   nil,   nil,   nil,   nil,   182,   182,   nil,   182,
   182,   182,   182,   182,   182,   182,   182,   182,    53,   182,
   185,   182,   185,   nil,   nil,    53,    53,    53,   nil,   nil,
   nil,   nil,   nil,   nil,    53,    53,   nil,    53,    53,    53,
    53,    53,    53,    53,    53,    53,   185,    53,   nil,    53,
   nil,   nil,   119,   185,   nil,   185,   nil,   nil,   nil,   nil,
   nil,   nil,   185,   185,   nil,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   nil,   185,   nil,   185,   119,   119,
   nil,   nil,   nil,   nil,   122,   119,   119,   119,   nil,   nil,
   nil,   nil,   nil,   nil,   119,   119,   nil,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   nil,   119,   nil,   119,
   122,   122,   124,   nil,   nil,   nil,   nil,   122,   122,   122,
   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,   nil,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   124,   122,
   126,   122,   nil,   nil,   nil,   124,   nil,   124,   nil,   nil,
   nil,   nil,   nil,   nil,   124,   124,   nil,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   126,   124,   128,   124,
   nil,   nil,   nil,   126,   nil,   126,   nil,   nil,   nil,   nil,
   nil,   nil,   126,   126,   nil,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   128,   126,   129,   126,   nil,   nil,
   nil,   128,   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,
   128,   128,   nil,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   129,   128,   130,   128,   nil,   nil,   nil,   129,
   nil,   129,   nil,   nil,   nil,   nil,   nil,   nil,   129,   129,
   nil,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   130,   129,   131,   129,   nil,   nil,   nil,   130,   nil,   130,
   nil,   nil,   nil,   nil,   nil,   nil,   130,   130,   nil,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   131,   130,
   132,   130,   nil,   nil,   nil,   131,   nil,   131,   nil,   nil,
   nil,   nil,   nil,   nil,   131,   131,   nil,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   132,   131,   133,   131,
   nil,   nil,   nil,   132,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   132,   132,   nil,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   133,   132,    68,   132,   nil,   nil,
   nil,   133,   nil,   133,   nil,   nil,   nil,   nil,   nil,   nil,
   133,   133,   nil,   133,   133,   133,   133,   133,   133,   133,
   133,   133,    68,   133,    48,   133,   nil,   nil,   nil,    68,
   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    68,    68,    68,    68,    68,    68,    68,    68,    68,
   139,    68,   nil,    68,   nil,    48,    48,   nil,    48,    48,
    48,   nil,   nil,   nil,   nil,    48,    48,    48,    48,    48,
    45,   nil,   nil,   nil,    45,   nil,   nil,    45,    45,   nil,
    45,   139,   139,    38,   139,   139,   139,    45,   nil,   nil,
   nil,   139,   139,   139,   139,   139,   nil,    38,   nil,    38,
    38,   nil,    38,    38,   167,   nil,    38,   nil,    45,   nil,
   nil,   nil,    13,    13,    45,    45,   nil,   nil,   167,   nil,
   167,   167,   175,   167,   167,   167,   167,    13,   nil,    13,
    13,   nil,    13,    13,   nil,   nil,   175,   nil,   175,   175,
   nil,   175,   175 ]

racc_action_pointer = [
     6,   150,   nil,   nil,   nil,   nil,   nil,   107,   145,   146,
   141,   144,   158,  1299,   -12,   nil,   nil,   nil,   nil,   nil,
   115,   nil,   158,   653,   nil,   117,   nil,   120,   134,   160,
   161,   nil,   160,   162,   163,   142,   nil,   nil,  1269,   nil,
   689,   180,   nil,   nil,   184,  1260,   144,   nil,  1209,   183,
   151,   169,   nil,   833,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -12,   -37,   -15,  1177,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,
   nil,   201,   nil,   203,   204,   205,   206,   207,   208,   157,
   nil,   179,   200,   173,   nil,   nil,   -45,   nil,   nil,   171,
   231,     7,   nil,   236,   nil,   198,   199,   nil,   nil,   nil,
   nil,   213,   721,   235,    -1,    -8,   nil,   221,   218,   893,
   219,   nil,   925,    19,   953,   255,   981,   -29,  1009,  1037,
  1065,  1093,  1121,  1149,   255,   nil,   nil,    83,   nil,  1235,
   139,   167,   195,   251,   nil,   279,   nil,   -13,   363,   391,
   419,    -9,   447,   507,   593,   233,   nil,   -29,   205,   nil,
   nil,   256,   227,   241,   229,    19,   nil,  1290,   242,   261,
   246,   nil,   nil,   nil,   264,  1308,   nil,   nil,   256,   749,
   287,   777,   805,   259,   nil,   861,   nil,   nil,   nil,   256,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   nil,   nil,    -6,     6,    11,    17,
    26,    52,    63,    58,    59,   nil,   nil,   nil,   nil,    37,
   nil,   nil,   nil,    73,    74,    84,    55,   nil,   nil,   nil,
   nil,   nil,    51,    81,   nil,    56,   111,    66,    68,    60,
   nil,   nil,   223,    89,    96,   nil,    91,   nil,   nil,   nil,
   nil,   nil,   307,   nil,   nil,   nil,   335,   nil,    60,   nil,
    69,    72,   nil,   117,   nil,    -8,    13,   nil,    91,   479,
    79,   535,   nil,   nil,   563,   nil,   nil,   114,   nil,   118,
   125,   nil,   621,   nil,   nil,   nil,    96,    86,   128,   nil,
   nil,   nil,   nil,   nil,   nil,    89,   nil,   nil,    92,   nil,
   nil ]

racc_action_default = [
  -176,  -176,    -1,    -2,    -3,    -4,    -5,  -176,  -176,   -12,
   -22,  -176,  -176,  -176,   -37,   -38,   -39,   -41,   -42,   -93,
  -176,   -11,  -176,  -176,   -23,  -176,   301,  -176,  -176,  -176,
  -176,   -46,   -48,   -50,   -51,  -176,   -36,  -170,   -58,   -13,
  -176,   -32,   -24,   -25,   -27,  -119,   -30,   -79,  -176,  -176,
  -170,   -96,   -98,  -176,  -101,  -102,  -104,  -105,  -106,  -107,
  -108,  -109,  -117,  -118,  -122,  -123,  -126,  -129,  -176,  -131,
  -132,  -133,  -134,  -136,  -137,  -138,  -139,  -141,  -176,  -143,
  -146,  -176,  -148,  -176,  -176,  -176,  -176,  -176,  -176,  -157,
  -158,  -162,  -176,  -176,  -168,  -169,  -176,  -173,  -174,  -176,
   -17,   -58,    -8,  -176,   -43,  -176,  -176,   -47,   -49,   -52,
   -35,   -67,  -176,  -176,  -176,  -119,   -15,   -58,  -176,  -176,
  -176,   -29,  -176,  -176,  -176,  -176,  -176,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,   -40,   -92,  -176,  -100,  -110,
  -176,  -176,  -176,  -176,  -130,  -176,  -140,  -176,   -22,  -176,
  -176,  -176,  -176,  -176,  -176,  -160,  -161,  -176,  -176,  -172,
  -175,  -176,  -176,   -67,  -176,  -176,   -44,  -176,   -77,  -176,
   -59,   -14,  -103,  -135,   -60,   -34,   -26,   -28,   -97,  -176,
  -176,  -176,  -176,  -176,  -119,  -176,   -83,   -84,   -89,  -176,
   -91,  -111,  -112,  -113,  -114,  -115,  -116,   -99,  -124,  -125,
  -127,  -128,  -176,  -142,  -144,  -145,  -176,  -176,  -176,  -176,
  -176,  -176,  -121,  -176,  -176,  -156,  -159,  -163,  -165,  -176,
  -167,  -171,   -16,  -176,  -176,   -20,   -77,    -7,    -9,   -45,
   -53,   -54,  -176,  -176,   -10,  -176,  -176,   -65,  -176,  -176,
   -82,   -88,  -176,  -176,   -87,   -90,  -176,  -149,  -150,  -151,
  -152,  -153,  -176,  -154,  -155,  -166,  -176,   -18,  -176,    -6,
   -55,  -176,   -78,   -68,   -70,   -74,   -72,   -73,   -67,  -176,
  -176,  -176,   -81,   -85,  -176,  -147,  -120,  -176,   -19,  -176,
   -57,   -95,  -176,   -71,   -75,   -76,   -77,   -66,   -61,   -63,
   -64,   -80,   -86,   -21,   -56,  -176,   -69,   -33,  -176,   -94,
   -62 ]

racc_goto_table = [
    36,   103,   114,   168,   102,   183,    23,   188,   135,   191,
   192,   193,   194,   195,   196,    14,    13,   234,   213,   214,
    45,   110,    43,   243,   224,   111,   146,   186,    14,    38,
   264,   121,   288,    14,   263,   289,   104,   115,   200,   201,
   198,   199,   283,   178,   197,   138,   219,   144,   203,   217,
   139,     1,   218,     2,     3,   226,     4,     5,     6,   101,
   239,     9,   241,   300,    21,    41,   116,   100,   161,   222,
   117,   237,   268,   136,   170,   259,   296,   229,   230,   231,
   279,   280,   240,   nil,   135,   nil,   nil,   nil,   163,   nil,
   nil,   nil,   nil,   nil,   277,   nil,   nil,   nil,   146,   146,
   146,   146,   nil,   nil,   174,   nil,   177,   nil,   nil,   139,
   nil,   nil,   292,   166,    14,   167,    45,   276,   176,   139,
   278,   nil,   nil,   272,   nil,   nil,    14,   175,   nil,   nil,
   nil,   nil,   nil,   204,   139,   297,   225,   nil,   103,   135,
   nil,   227,   202,   nil,   206,   207,   208,   209,   210,   211,
   212,   212,   291,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   286,   nil,   228,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,
   nil,   nil,   244,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   266,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   139,
   nil,   287,   225,   267,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   290,   nil,   nil,   281,   nil,   212,
   nil,   nil,   nil,   244,   nil,   nil,   266,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   139,   nil,   nil,   nil,
   nil,   244,   290,   nil,   nil,   nil,   nil,   nil,   nil,   267,
   nil,   299 ]

racc_goto_check = [
    28,    13,    29,    10,    12,    52,    18,    52,    17,    52,
    52,    52,    52,    52,    52,    33,     7,    11,    64,    64,
    14,    28,    26,    25,    24,     9,    66,    54,    33,     7,
    47,    28,    44,    33,    46,    45,    33,    14,    67,    67,
    65,    65,    49,    58,    59,    60,    69,    70,    77,    82,
    14,     1,    83,     2,     3,    10,     4,     5,     6,     8,
    52,    15,    52,    45,    16,    19,    20,    21,    22,    23,
    30,    31,    32,    35,    29,    11,    47,    39,    40,    41,
    42,    43,    54,   nil,    17,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    66,    66,
    66,    66,   nil,   nil,     9,   nil,    28,   nil,   nil,    14,
   nil,   nil,    25,    33,    33,     7,    14,    64,    26,    14,
    24,   nil,   nil,    52,   nil,   nil,    33,     7,   nil,   nil,
   nil,   nil,   nil,    28,    14,    11,    13,   nil,    13,    17,
   nil,    12,    14,   nil,    18,    14,    14,    14,    14,    14,
    14,    14,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,    29,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,    28,   nil,    14,
   nil,   nil,   nil,    14,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,    14,    13,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,    28 ]

racc_goto_pointer = [
   nil,    51,    53,    54,    56,    57,    58,     9,    32,   -13,
  -108,  -151,   -23,   -26,    -3,    61,    55,   -41,    -4,    42,
    25,    42,   -32,   -92,  -138,  -162,    -1,   nil,   -14,   -38,
    29,  -103,  -165,     8,   nil,    24,   nil,   nil,   nil,   -90,
   -89,   -88,  -181,  -180,  -238,  -235,  -202,  -206,   nil,  -223,
   nil,   nil,  -119,   nil,   -98,   nil,   nil,   nil,   -79,   -93,
    -8,   nil,   nil,   nil,  -135,  -100,   -42,  -104,   nil,  -111,
   -21,   nil,   nil,   nil,   nil,   nil,   nil,   -99,   nil,   nil,
   nil,   nil,  -108,  -105,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    71,   184,   113,   nil,    47,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,    44,    79,    46,
   nil,   nil,   nil,    80,    16,   187,    17,    18,    30,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,   nil,
    63,    57,    48,    58,   nil,    59,    60,    61,    51,    52,
    54,    55,    56,    62,   nil,    64,    65,    66,    67,    68,
    69,    70,    72,    74,    75,    76,    78,   nil,    82,    89,
    90,    93,   nil,   nil,    97,    98 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  7, 73, :_reduce_6,
  3, 76, :_reduce_7,
  1, 76, :_reduce_8,
  3, 80, :_reduce_9,
  6, 74, :_reduce_10,
  2, 71, :_reduce_11,
  0, 84, :_reduce_none,
  2, 84, :_reduce_none,
  3, 85, :_reduce_14,
  4, 83, :_reduce_15,
  5, 72, :_reduce_16,
  0, 90, :_reduce_none,
  3, 90, :_reduce_18,
  3, 92, :_reduce_19,
  1, 92, :_reduce_none,
  4, 91, :_reduce_21,
  0, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 87, :_reduce_24,
  1, 87, :_reduce_25,
  3, 94, :_reduce_26,
  1, 94, :_reduce_none,
  3, 95, :_reduce_28,
  2, 95, :_reduce_29,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  0, 88, :_reduce_none,
  6, 88, :_reduce_33,
  2, 98, :_reduce_34,
  3, 89, :_reduce_35,
  2, 89, :_reduce_36,
  1, 89, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 103, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 104, :_reduce_43,
  4, 104, :_reduce_44,
  5, 105, :_reduce_45,
  1, 106, :_reduce_46,
  2, 106, :_reduce_47,
  1, 106, :_reduce_48,
  2, 106, :_reduce_49,
  1, 106, :_reduce_50,
  1, 106, :_reduce_51,
  2, 106, :_reduce_52,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  2, 108, :_reduce_55,
  4, 109, :_reduce_56,
  1, 110, :_reduce_none,
  0, 77, :_reduce_none,
  2, 77, :_reduce_59,
  0, 99, :_reduce_none,
  3, 99, :_reduce_61,
  3, 112, :_reduce_62,
  1, 112, :_reduce_none,
  1, 113, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_66,
  0, 78, :_reduce_none,
  3, 78, :_reduce_68,
  3, 114, :_reduce_69,
  1, 114, :_reduce_none,
  2, 115, :_reduce_71,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  0, 117, :_reduce_74,
  1, 117, :_reduce_75,
  1, 117, :_reduce_76,
  0, 79, :_reduce_none,
  2, 79, :_reduce_78,
  1, 118, :_reduce_none,
  6, 119, :_reduce_80,
  5, 119, :_reduce_81,
  4, 121, :_reduce_82,
  3, 121, :_reduce_83,
  1, 122, :_reduce_none,
  3, 122, :_reduce_85,
  3, 93, :_reduce_86,
  1, 93, :_reduce_none,
  4, 123, :_reduce_88,
  3, 123, :_reduce_89,
  4, 124, :_reduce_90,
  3, 124, :_reduce_91,
  2, 125, :_reduce_92,
  1, 101, :_reduce_93,
  3, 111, :_reduce_94,
  1, 111, :_reduce_none,
  1, 97, :_reduce_none,
  3, 97, :_reduce_97,
  1, 126, :_reduce_none,
  3, 126, :_reduce_99,
  2, 127, :_reduce_100,
  1, 127, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_103,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 130, :_reduce_111,
  3, 130, :_reduce_112,
  3, 130, :_reduce_113,
  3, 130, :_reduce_114,
  3, 130, :_reduce_115,
  3, 130, :_reduce_116,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 131, :_reduce_none,
  3, 132, :_reduce_120,
  1, 132, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  3, 133, :_reduce_124,
  3, 133, :_reduce_125,
  1, 133, :_reduce_none,
  3, 135, :_reduce_127,
  3, 135, :_reduce_128,
  1, 135, :_reduce_none,
  2, 136, :_reduce_130,
  1, 136, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  3, 138, :_reduce_135,
  1, 138, :_reduce_136,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 142, :_reduce_141,
  3, 81, :_reduce_142,
  1, 81, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_145,
  1, 144, :_reduce_none,
  5, 140, :_reduce_147,
  1, 140, :_reduce_none,
  4, 146, :_reduce_149,
  4, 146, :_reduce_150,
  4, 146, :_reduce_151,
  4, 146, :_reduce_152,
  4, 146, :_reduce_153,
  4, 146, :_reduce_154,
  4, 146, :_reduce_155,
  3, 146, :_reduce_156,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  3, 147, :_reduce_159,
  2, 147, :_reduce_160,
  2, 147, :_reduce_161,
  1, 147, :_reduce_162,
  3, 148, :_reduce_163,
  1, 149, :_reduce_none,
  1, 150, :_reduce_none,
  2, 151, :_reduce_166,
  1, 151, :_reduce_167,
  1, 137, :_reduce_168,
  1, 137, :_reduce_169,
  1, 96, :_reduce_170,
  3, 134, :_reduce_171,
  2, 134, :_reduce_172,
  1, 134, :_reduce_none,
  1, 152, :_reduce_none,
  2, 153, :_reduce_175 ]

racc_reduce_n = 176

racc_shift_n = 301

racc_token_table = {
  false => 0,
  :error => 1,
  :UPDATE => 2,
  :SET => 3,
  :comma => 4,
  :equals_operator => 5,
  :DELETE => 6,
  :FROM => 7,
  :FOR => 8,
  :left_paren => 9,
  :right_paren => 10,
  :SELECT => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :DISTINCT => 15,
  :asterisk => 16,
  :AS => 17,
  :CROSS => 18,
  :JOIN => 19,
  :INNER => 20,
  :LEFT => 21,
  :OUTER => 22,
  :RIGHT => 23,
  :FULL => 24,
  :ON => 25,
  :USING => 26,
  :WHERE => 27,
  :GROUP => 28,
  :BY => 29,
  :HAVING => 30,
  :ORDER => 31,
  :ASC => 32,
  :DESC => 33,
  :LIMIT => 34,
  :unsigned_integer => 35,
  :NOT => 36,
  :BETWEEN => 37,
  :AND => 38,
  :IN => 39,
  :LIKE => 40,
  :IS => 41,
  :NULL => 42,
  :EXISTS => 43,
  :identifier => 44,
  :OR => 45,
  :not_equals_operator => 46,
  :less_than_operator => 47,
  :greater_than_operator => 48,
  :less_than_or_equals_operator => 49,
  :greater_than_or_equals_operator => 50,
  :plus_sign => 51,
  :minus_sign => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :AVG => 57,
  :MAX => 58,
  :MIN => 59,
  :SUM => 60,
  :COALESCE => 61,
  :sql_function => 62,
  :E => 63,
  :quote => 64,
  :character_string_literal => 65,
  :DATE => 66,
  :date_string => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UPDATE",
  "SET",
  "comma",
  "equals_operator",
  "DELETE",
  "FROM",
  "FOR",
  "left_paren",
  "right_paren",
  "SELECT",
  "INSERT",
  "INTO",
  "VALUES",
  "DISTINCT",
  "asterisk",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "BY",
  "HAVING",
  "ORDER",
  "ASC",
  "DESC",
  "LIMIT",
  "unsigned_integer",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "COALESCE",
  "sql_function",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_statement",
  "delete_statement",
  "table_reference",
  "assignment_list",
  "where_clause",
  "order_by_clause",
  "limit_clause",
  "assignment",
  "column_reference",
  "value_expression",
  "query_expression",
  "maybe_for_update",
  "subquery",
  "distinct",
  "select_list",
  "table_expression",
  "table_factor",
  "column_list",
  "value_list",
  "in_column_list",
  "in_value_list",
  "select_sublist",
  "derived_column",
  "column_name",
  "search_condition",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "value_expression_list",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "column_or_star",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4], val[5], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_8(val, _values, result)
     result = Array(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::Assignment.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3], val[4], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_19(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_26(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_69(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_71(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_94(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_120(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_130(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_135(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Null.new 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Coalesce.new(*val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::SQLFunction.new(val[0], *val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::SQLFunction.new(val[0]) 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_166(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
